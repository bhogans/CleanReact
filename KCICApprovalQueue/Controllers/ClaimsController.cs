using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using KCICApprovalQueue.Data;
using KCICApprovalQueue.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace KCICApprovalQueue.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ClaimsController : ControllerBase
    {
        ///// <summary>
        ///// Protected endpoint for creating new Claim records
        ///// </summary>
        ///// <returns></returns>
        [HttpPost]
        [Authorize(Roles = "submitter")]
        public IActionResult Post([FromBody] ClaimDataModel model)
        {
            //Inject date submitted & submitted by
            model.DateSubmitted = DateTime.Now;
            model.SubmittedBy = User.Identity.Name;

            //Persist the new claim
            ClaimsRepository.Insert(model);

            //Return the model that now has an autogenerated GUID
            return Ok(model);
        }

        /// <summary>
        /// REST endpoint for getting all claims in queue
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public IActionResult Get()
        {
            try
            {
                return Ok(ClaimsRepository.GetAll());
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex);
            }
        }

        [HttpPut]
        [Route("PutStatus")]
        [Authorize(Roles = "submitter")]
        public IActionResult PutStatus([FromBody] ClaimDataModel model)
        {
            if (!ModelState.IsValid)
                return BadRequest("Not a valid model");

            //Persist the new claim
            ClaimsRepository.Update(model);

            return Ok(model);
        }

        [HttpPut]
        [Authorize(Roles = "approver")]
        public IActionResult Put([FromBody] ClaimDataModel model)
        {
            if (!ModelState.IsValid)
                return BadRequest("Not a valid model");

            //update the existing claim
            ClaimsRepository.SetStatus(model.ID, model.Status.ToString());

            return Ok(model);
        }
    }
}